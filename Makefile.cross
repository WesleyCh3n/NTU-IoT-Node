CCFLAGS := -Bstatic -std=c++17 -O3 -march=armv8-a -mfloat-abi=hard -mfpu=neon-fp-armv8
SRC := main.cc src/cow_monitor.cpp
TARGET := ntu-iot-node_cross
OBJFILES := cow_monitor.o main.o

LIBFILES := ./src/network/lib/libnetwork.a \
./src/yolov4-tiny/lib/libyolov4_tiny.a \
./src/mobilenetv2/lib/libmobilenetv2.a

ifeq ($(R),1)
	CCFLAGS += -DRELEASE -DNTU_IOT_NODE_VERSION=\"$(V)\"
endif

NETWORK_DIR := ./src/network
YOLO_DIR := ./src/yolov4-tiny
MOBILENET_DIR = ./src/mobilenetv2

TF_DIR := /opt/tensorflow_src
OPENCV_DIR := /opt/opencv
RASPICAM_DIR := /opt/raspicam
VC_DIR := /opt/vc
BOOST_DIR := /opt/boost_1_75_0
CXXOPT_DIR := /opt/cxxopts-2.2.1
# MQTTC_DIR := /opt/mqtt.c
# MQTTCXX_DIR := /opt/mqtt.cpp
MQTTC_DIR := /opt/paho.mqtt.c
MQTTCXX_DIR := /opt/paho.mqtt.cpp
ZLIB_DIR := /opt/zlib
SSL_DIR := /opt/ssl

JPEG_DIR := /opt/libjpeg
PNG_DIR := /opt/libpng
TIFF_DIR := /opt/libtiff

INCLUDES := \
-I$(TF_DIR)/tensorflow/lite/tools/make/downloads/flatbuffers/include \
-I$(TF_DIR) \
-I$(OPENCV_DIR)/include/opencv4 \
-I$(RASPICAM_DIR)/include \
-I$(VC_DIR)/include \
-I$(BOOST_DIR) \
-I$(CXXOPT_DIR)/include \
-I$(MQTTC_DIR)/include \
-I$(MQTTCXX_DIR)/include \
-I$(JPEG_DIR)/include \
-I$(PNG_DIR)/include \
-I$(TIFF_DIR)/include \
-I$(ZLIB_DIR)/include \
-I$(SSL_DIR)/include \
-I$(NETWORK_DIR) \
-I.

LIBDIRS := \
-L$(TF_DIR)/tensorflow/lite/tools/make/gen/rpi_armv7l/lib \
-L$(OPENCV_DIR)/lib/ \
-L$(OPENCV_DIR)/lib/opencv4/3rdparty \
-L$(OPENCV_DIR)/build/lib \
-L$(RASPICAM_DIR)/lib \
-L$(MQTTC_DIR)/lib \
-L$(MQTTCXX_DIR)/lib \
-L$(VC_DIR)/lib \
-L$(NETWORK_DIR)/lib \
-L$(YOLO_DIR)/lib \
-L$(MOBILENET_DIR)/lib \
-L$(JPEG_DIR)/lib \
-L$(PNG_DIR)/lib \
-L$(TIFF_DIR)/lib \
-L$(ZLIB_DIR)/lib \
-L$(SSL_DIR)/lib

LIBS := \
-lstdc++fs \
-lyolov4_tiny \
-lmobilenetv2 \
-lnetwork \
-ltensorflow-lite \
`pkg-config --libs-only-l opencv4` \
-littnotify -llibprotobuf -llibwebp \
-llibopenjp2 -lIlmImf -lquirc -ltegra_hal \
-lade -ljpeg -lpng -ltiff \
-lpaho-mqttpp3 -lpaho-mqtt3a -lpaho-mqtt3c \
-lz -lm -lpthread -ldl -lrt \
-lraspicam -lraspicam_cv -lmmal -lmmal_core -lmmal_util -lmmal_vc_client \
-lbcm_host -lvchiq_arm -lmmal_components -lcontainers -lvcsm -lvcos

# make clean;make RELEASE=1 VERSION=2.0.1
all:$(TARGET)

$(TARGET):$(OBJFILES)
	@echo "CC $@ FROM $^"
	@$(CXX) $(CCFLAGS) -o $(TARGET) $(OBJFILES) $(INCLUDES) $(LIBDIRS) $(LIBS)
	@echo "Compiling Complete"

$(OBJFILES):$(SRC) $(LIBFILES)
	@echo "Compiling VERSION: $(VERSION)"
	@echo "CC $@ FROM $^"
	@$(CXX) $(CCFLAGS) -c $(SRC) $(INCLUDES) $(LIBDIRS) $(LIBS)

$(LIBFILES):
	@echo "Compiling ./src/network/network.cc"
	@make -C ./src/network/ -f Makefile.cross
	@echo "Compiling ./src/yolov4-tiny/yolov4-tiny.cc"
	@make -C ./src/yolov4-tiny/ -f Makefile.cross
	@echo "Compiling ./src/mobilenetv2/mobilenetv2.cc"
	@make -C ./src/mobilenetv2/ -f Makefile.cross

.PHONY: clean
clean:
	rm -f $(TARGET) $(OBJFILES)

.PHONY: dellib
dellib:
	rm -rf ./src/network/lib/ \
		./src/mobilenetv2/lib/ \
		./src/yolov4-tiny/lib/
